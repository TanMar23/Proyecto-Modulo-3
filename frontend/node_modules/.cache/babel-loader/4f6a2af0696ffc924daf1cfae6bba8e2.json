{"ast":null,"code":"'use strict';\n\nvar _require = require('./errors'),\n    NoVideoInputDevicesError = _require.NoVideoInputDevicesError;\n\nfunction defaultDeviceIdChooser(filteredDevices, videoDevices, facingMode) {\n  if (filteredDevices.length > 0) {\n    return filteredDevices[0].deviceId;\n  }\n\n  if (videoDevices.length == 1 || facingMode == 'user') {\n    return videoDevices[0].deviceId;\n  }\n\n  return videoDevices[1].deviceId;\n}\n\nvar getFacingModePattern = function getFacingModePattern(facingMode) {\n  return facingMode == 'environment' ? /rear|back|environment/ig : /front|user|face/ig;\n};\n\nfunction getDeviceId(facingMode) {\n  var chooseDeviceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDeviceIdChooser; // Get manual deviceId from available devices.\n\n  return new Promise(function (resolve, reject) {\n    var enumerateDevices = void 0;\n\n    try {\n      enumerateDevices = navigator.mediaDevices.enumerateDevices();\n    } catch (err) {\n      reject(new NoVideoInputDevicesError());\n    }\n\n    enumerateDevices.then(function (devices) {\n      // Filter out non-videoinputs\n      var videoDevices = devices.filter(function (device) {\n        return device.kind == 'videoinput';\n      });\n\n      if (videoDevices.length < 1) {\n        reject(new NoVideoInputDevicesError());\n        return;\n      }\n\n      var pattern = getFacingModePattern(facingMode); // Filter out video devices without the pattern\n\n      var filteredDevices = videoDevices.filter(function (_ref) {\n        var label = _ref.label;\n        return pattern.test(label);\n      });\n      resolve(chooseDeviceId(filteredDevices, videoDevices, facingMode));\n    });\n  });\n}\n\nmodule.exports = {\n  getDeviceId: getDeviceId,\n  getFacingModePattern: getFacingModePattern\n};","map":null,"metadata":{},"sourceType":"script"}